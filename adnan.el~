(which-function-mode 1)
(show-paren-mode 1)

(defun close-all-buffers ()
  (interactive)
  (mapc 'kill-buffer (buffer-list)))

(defun smart-line-beginning ()
  "Move point to the beginning of text
on the current line; if that is already
the current position of point, then move
it to the beginning of the line."
  (interactive)
  (let ((pt (point)))
    (beginning-of-line-text)
    (when (eq pt (point))
      (beginning-of-line))))




(defun backward-kill-word-or-kill-region (&optional arg)
  (interactive "p")
  (if (region-active-p)
      (kill-region (region-beginning) (region-end))
    (backward-kill-word arg)))

(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not filename)
        (message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn (rename-file name new-name 1)
               (rename-buffer new-name)
               (set-visited-file-name new-name)
               (set-buffer-modified-p nil))))))

(defun show-dot-emacs-structure ()
  "Show the outline-mode structure of ~/.emacs"
  (interactive)
  (occur "^;;;;+"))

(defun select-next-window ()
  "Switch to the next window"
  (interactive)
  (select-window (next-window)))

(defun select-previous-window ()
  "Switch to the previous window"
  (interactive)
  (select-window (previous-window)))

(defun eshell/clear ()
  (interactive)
  (let ((inhibit-read-only t))
    (erase-buffer)))

(defun mac-switch-meta nil
  "switch meta between Option and Command"
  (interactive)
  (if (eq mac-option-modifier nil)
      (progn
        (setq mac-option-modifier 'meta)
        (setq mac-command-modifier 'hyper)
        )
    (progn
      (setq mac-option-modifier nil)
      (setq mac-command-modifier 'meta)
      )
    )
  )
(mac-switch-meta)

;;;; keybindings
(global-set-key (kbd "C-c u") 'swiper-all)
(global-set-key "\C-x\C-k" 'kill-region)
(global-set-key "\M-k" '(lambda () (interactive) (kill-line 0)))

(global-set-key (kbd "M-. ") 'replace-regexp)
(global-set-key (kbd "C-c g") 'magit-status)


(global-set-key  (kbd "C-c <SPC>") 'eshell)

 ;(global-set-key (kbd "C-c o") ')
;; (global-set-key (kbd "M-/") 'hippie-expand)
;; (global-unset-key (kbd "C-x DEL"))
;; (global-unset-key (kbd "C-x C-k"))
;; (global-unset-key (kbd "C-x C-b"))

;; (global-set-key (kbd "C-<TAB>") 'execute-extended-command)
;; (global-set-key (kbd "\C-;") 'occur)

;; (global-set-key (kbd "M-'") 'select-previous-window)
;; (global-set-key (kbd "M-,")'select-next-window)


;;(global-set-key (kbd "C-.") 'execute-extended-command)
;;counsel-set-variable

(global-set-key "\C-h" 'forward-char)
(global-set-key "\M-h" 'forward-word)

(global-set-key (kbd "C-'") 'select-previous-window)
(global-set-key (kbd "C-,") 'select-next-window)

(global-set-key "\C-w" 'backward-kill-word-or-kill-region)
(global-set-key "\C-c\C-v" 'end-of-buffer)
(global-set-key "\C-c\M-v" 'beginning-of-buffer)


(global-set-key (kbd "C-x C-m") 'execute-extended-command)
(global-set-key "\C-a" 'smart-line-beginning)

(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c b") 'org-iswitchb)
(global-set-key (kbd "C-c C-c") 'org-capture)

(with-eval-after-load 'evil
  (define-key evil-emacs-state-map (kbd "C-z") nil)
  (global-unset-key (kbd "C-z"))
  (global-set-key (kbd "C-z a") 'apropos)
  (global-set-key (kbd "C-z k") 'describe-key)
  (global-set-key (kbd "C-z b") 'counsel-descbinds)
  (global-set-key (kbd "C-z .") 'view-local-help)
  (global-set-key (kbd "C-z m") 'describe-mode)

  (global-set-key (kbd "C-z f") 'counsel-describe-function)
  )

(require 'org-trello)
(custom-set-variables '(orgtrello-log-level orgtrello-log-trace))
(add-hook 'org-mode-hook
          (lambda ()
            (let ((filename (buffer-file-name (current-buffer))))
              (when (and filename (string= "trello" (file-name-extension filename)))
                (org-trello-mode)))))

(with-eval-after-load 'org
  (require 'org-beautify-theme)
  (require 'org-bullets)

  

  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (require 'ob-python)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '( (python . t)
      (shell . t)
      (js . t)
      (sqlite . t)
      (emacs-lisp . t)
      )

   )
  (setq org-directory "~/Dropbox/org-mode/")
  (setq org-mobile-inbox-for-pull (concat org-directory "/flagged.org"))
  (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")

  (setq deft-directory "/Users/adnanwahab/Dropbox/org-mode")

  (setq org-archive-location (concat org-directory "/flagged.org::* Done Tasks"))
  (defun org-archive-done-tasks ()
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (outline-previous-heading)))
     "/DONE" 'file)) 

  (setq org-default-notes-file (concat org-directory "/you.org"))
  (setq org-agenda-files (list org-directory))
  (setq org-use-property-inheritance t)
  (setq org-agenda-diary-file (concat org-directory "/diary.org"))

  (setq org-agenda-category-icon-alist
        '(("[Ee]macs" "/usr/share/icons/hicolor/16x16/apps/emacs-snapshot.png" nil nil :ascent center)
          ("Naquadah" "~/.emacs.d/icons/org/naquadah.png" nil nil :ascent center)
          ("Visitors" "~/.emacs.d/icons/org/visitors.png" nil nil :ascent center)
          ("\\(Party\\|Celeb\\)" "~/.emacs.d/icons/org/party.png" nil nil :ascent center)
          ("office" "~/.emacs.d/icons/org/wine.png" nil nil :ascent center)
          ("Gnus" "~/.emacs.d/icons/org/gnus.png" nil nil :ascent center)
          ("org" "~/.emacs.d/icons/org/org.png" nil nil :ascent center)
          ("you" "~/.emacs.d/icons/org/medical.png" nil nil :ascent center)
          ("Music" "~/.emacs.d/icons/org/music.png" nil nil :ascent center)
          ("Wii" "~/.emacs.d/icons/org/wii.png" nil nil :ascent center)
          ("Trip" "~/.emacs.d/icons/org/trip.png" nil nil :ascent center)
          ("Train" "~/.emacs.d/icons/org/train.png" nil nil :ascent center)
          ("Anniv" "~/.emacs.d/icons/org/anniversary.png" nil nil :ascent center)
          ("Debian" "~/.emacs.d/icons/org/debian.png" nil nil :ascent center)
          ("calendar" "~/.emacs.d/icons/org/tree.png" nil nil :ascent center)
          ("awesome" "~/.emacs.d/icons/org/awesome.png" nil nil :ascent center)
          ("blog" "~/.emacs.d/icons/org/book.png" nil nil :ascent center)
          ("research" "~/.emacs.d/icons/org/openstack.png" nil nil :ascent center)
          ("\\(Holidays\\|Vacation\\)" "~/.emacs.d/icons/org/holidays.png" nil nil :ascent center)
          (".*" '(space . (:width (16))))))

  (setq org-agenda-start-on-weekday 6)
  (setq org-agenda-span 7)
  (setq org-agenda-tags-column -100)
  (setq org-agenda-sticky nil)
  (setq org-agenda-inhibit-startup t)
  (setq org-agenda-show-log t)
  (setq org-hide-leading-stars nil)
  (setq org-cycle-separator-lines 2)
  (setq org-startup-indented t)
  
  (setq org-archive-mark-done t)
  
  (setq org-startup-folded t)
  (org-defkey org-mode-map (kbd "C-,") 'select-next-window)
  (org-defkey org-mode-map (kbd "C-c <SPC>") 'eshell)
  (org-defkey org-mode-map (kbd "C-'") 'select-previous-window)
                                        ;http://emacsconf2015.org/wiki/Videos/
                                        ;http://doc.norang.ca/org-mode.html#KeyBindings
                                        ;http://rix.si/~rrix/Hardcore%20Freestyle%20Emacs.html#sec-6-1-2
  ;; http://emacs.stackexchange.com/
  ;; http://doc.norang.ca/org-mode.html
  ;; http://rix.si/~rrix/Hardcore%20Freestyle%20Emacs.html
  ;; https://carlhu.com/orgmode
  ;; http://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html
  )



;; config cousnel

